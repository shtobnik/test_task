{"version":3,"sources":["../../src/app/data.service.ts"],"names":[],"mappings":"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","file":"data.service.js","sourcesContent":["import {Injectable}        from \"@angular/core\";\nimport {Http, Headers, Response, URLSearchParams, RequestOptions, Request, RequestMethod, ResponseContentType} from '@angular/http';\nimport {Observable}        from 'rxjs/Observable';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class DataService {\n    constructor (private _http: Http) {}\n\n    private commentsUrl   = 'http://frontend-test.pingbull.com/pages/denis.nigegorodcev@gmail.com/comments';\n    private newCommentUrl = 'http://frontend-test.pingbull.com/pages/denis.nigegorodcev@gmail.com/comments';\n\n    getCommentsList() {\n        let params: URLSearchParams = new URLSearchParams();\n        params.set('count', '5');\n        params.set('offset', '0');\n\n        console.log('params', params);\n\n        return this._http.get(this.commentsUrl, {\n            search: params\n        })\n            .map(res => res.json());\n    }\n\n    sendNewComment(content: string, parent: any) {\n        let params: URLSearchParams = new URLSearchParams();\n        params.set('content', 'check here');\n        params.set('parent', null);\n\n        console.log('params', params);\n\n        return this._http.post(this.newCommentUrl, {\n            search: params\n        })\n            .map(res => res.json());\n    }\n\n\n    sendNewComment1(content: string, parent: any): Observable<Comment> {\n        let body = JSON.stringify({\"content\": content, \"parent\": parent});\n        // var headers = new Headers();\n        // headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n        return this._http.post(this.newCommentUrl, body, {})\n            .map(res => res.json());\n    }\n\n\n\n    sendNewComment2(content: string, parent: any) {\n\n        const params = new URLSearchParams();\n\n\n        // let setHeaders = new Headers();\n        // setHeaders.append('Content-Type', 'application/json');\n\n        // const options = new RequestOptions({\n        //     responseType: ResponseContentType.Json,\n        //     withCredentials: false\n        // });\n\n        // let body = JSON.stringify({\"content\": content, \"parent\": parent});\n        // var headers = new Headers();\n        // headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n        // return this._http.post(this.newCommentUrl, body, {})\n        //     .map(res => res.json());\n\n\n        const headers = new Headers({'Content-Type': 'application/json'});\n        headers.append('Content-Type', 'application/json; charset=utf-8');\n\n        console.log('content', content);\n\n        let body = {\"content\": content, \"parent\": parent};\n\n        return this._http.post(this.newCommentUrl, body, headers)\n        .map(res => res.json());\n    }\n\n\n\n    private handleError(error: any) {\n        console.error('Произошла ошибка', error);\n        return Promise.reject(error.message || error);\n    }\n}"],"sourceRoot":"/src"}