{"version":3,"sources":["../../src/app/data.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;YAOa,WAAW;gBACpB,qBAAqB,KAAW;oBAAX,UAAK,GAAL,KAAK,CAAM;oBAMxB,gBAAW,GAAG,+EAA+E,CAAC;gBANnE,CAAC;gBAQpC;;mBAEG;gBACH,kCAAY,GAAZ;oBACI,IAAI,MAAM,GAAoB,IAAI,sBAAe,EAAE,CAAC;oBACpD,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;oBACzB,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;oBAE1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE;wBACpC,MAAM,EAAE,MAAM;qBACjB,CAAC;yBACG,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;gBAChC,CAAC;gBAED,qCAAe,GAAf;oBAAA,iBAeC;oBAdG,IAAI,CAAC,YAAY,EAAE;yBAClB,SAAS,CACN,UAAC,QAAkB,IAAK,OAAA,KAAI,CAAC,QAAQ,GAAG,QAAQ,EAAxB,CAAwB,EAC5C,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,KAAK,CAAC,EAAZ,CAAY,EAErB;wBACI,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;4BACzB,EAAE,CAAC,CAAE,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK,CAAE,CAAC,CAAC,CAAC;gCAC5B,KAAI,CAAC,MAAM,GAAI,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;gCACjC,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;4BACzC,CAAC;wBACL,CAAC,CAAC,CAAC;oBACX,CAAC,CACJ,CAAC;gBACN,CAAC;gBAID;;;;mBAIG;gBACH,oCAAc,GAAd,UAAe,QAAa,EAAE,OAAe;oBACzC,IAAM,MAAM,GAAG,IAAI,sBAAe,EAAE,CAAC;oBAErC,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;oBAEnD,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;oBACvD,IAAI,IAAI,GAAG,EAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC;oBAEpD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,OAAO,CAAC;yBACtD,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;gBAC5B,CAAC;gBAID;;;mBAGG;gBACH,mCAAa,GAAb,UAAc,SAAS;oBACnB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,GAAG,GAAG,SAAS,CAAC;yBAC3D,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;gBAC5B,CAAC;gBAGD;;;;mBAIG;gBACH,mCAAa,GAAb,UAAc,SAAiB,EAAE,OAAe;oBAC5C,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;oBAEnD,IAAI,IAAI,GAAG,EAAC,SAAS,EAAE,OAAO,EAAC,CAAC;oBAChC,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;oBAEvD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,GAAG,GAAG,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC;yBACvE,GAAG,CAAC,UAAC,IAAa,IAAK,OAAA,IAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC,CAAC;gBACzC,CAAC;gBAGD;;;mBAGG;gBACK,iCAAW,GAAnB,UAAoB,KAAU;oBAC1B,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;oBACzC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;gBAClD,CAAC;gBACL,kBAAC;YAAD,CAjGA,AAiGC,IAAA;YAjGY,WAAW;gBADvB,iBAAU,EAAE;iDAEmB,WAAI;eADvB,WAAW,CAiGvB;;QAAA,CAAC","file":"data.service.js","sourcesContent":["import {Injectable}        from \"@angular/core\";\nimport {Http, Headers, Response, URLSearchParams, RequestOptions, Request, RequestMethod, ResponseContentType} from '@angular/http';\nimport {Observable}        from 'rxjs/Observable';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class DataService {\n    constructor (private _http: Http) {}\n\n    comments;\n    userId : string;\n    userImg: string;\n\n    private commentsUrl = 'http://frontend-test.pingbull.com/pages/denis.nigegorodcev@gmail.com/comments';\n\n    /**\n     * comments list\n     */\n    commentsList() {\n        let params: URLSearchParams = new URLSearchParams();\n        params.set('count', '5');\n        params.set('offset', '0');\n\n        return this._http.get(this.commentsUrl, {\n            search: params\n        })\n            .map(res => res.json());\n    }\n\n    getCommentsList() {\n        this.commentsList()\n        .subscribe(\n            (response: Response) => this.comments = response,\n                error => alert(error),\n\n                () => {\n                    this.comments.forEach(element => {\n                        if ( element.author.id === 1 ) {\n                            this.userId  = element.author.id;\n                            this.userImg = element.author.avatar;\n                        }\n                    });\n            }\n        );\n    }\n\n\n\n    /**\n     * new comment\n     * @param parentId \n     * @param content \n     */\n    sendNewComment(parentId: any, content: string) {\n        const params = new URLSearchParams();\n\n        let headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n\n        let options = new RequestOptions({ headers: headers });\n        let body = {\"content\": content, \"parent\": parentId};\n\n        return this._http.post(this.commentsUrl, body, options)\n        .map(res => res.json());\n    }\n\n\n\n    /**\n     * remove comment\n     * @param commentId \n     */\n    removeComment(commentId) {\n        return this._http.delete(this.commentsUrl + '/' + commentId)\n        .map(res => res.json());\n    }\n\n\n    /**\n     * edit comment\n     * @param commentId \n     * @param newText \n     */\n    onEditComment(commentId: number, newText: string) {\n        let headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n\n        let body = {\"content\": newText};\n        let options = new RequestOptions({ headers: headers });\n\n        return this._http.put(this.commentsUrl + '/' + commentId, body, options)\n        .map((data:Response) => data.json());\n    }\n\n\n    /**\n     * handle error\n     * @param error \n     */\n    private handleError(error: any) {\n        console.error('Произошла ошибка', error);\n        return Promise.reject(error.message || error);\n    }\n}"],"sourceRoot":"/src"}